import numpy as np

# Define the function to minimize
def f(x):
    return x[0]**2 + x[1]**2  # Example function

# Differential Evolution Method
def differential_evolution(num_individuals=30, max_iterations=100, mutation_factor=0.8, crossover_probability=0.7):
    # Initialize population randomly
    population = np.random.uniform(-10, 10, (num_individuals, 2))
    best_solution = None
    best_score = float('inf')
    
    for iteration in range(max_iterations):
        for i in range(num_individuals):
            # Mutation
            indices = [j for j in range(num_individuals) if j != i]
            a, b, c = population[np.random.choice(indices, 3, replace=False)]
            mutant_vector = a + mutation_factor * (b - c)
            
            # Crossover
            crossover_mask = np.random.rand(2) < crossover_probability
            trial_vector = np.where(crossover_mask, mutant_vector, population[i])
            
            # Selection
            if f(trial_vector) < f(population[i]):
                population[i] = trial_vector
            
        # Find the best solution in the current population
        current_best_index = np.argmin([f(individual) for individual in population])
        current_best_score = f(population[current_best_index])
        
        if current_best_score < best_score:
            best_score = current_best_score
            best_solution = population[current_best_index]
    
    return best_solution  # Return the best point found (minimum point)
