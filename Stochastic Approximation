import numpy as np

class StochasticApproximation:
    def __init__(self, learning_rate=0.01, n_iterations=100):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations

    def fit(self, X, y):
        self.theta = np.zeros(X.shape[1])
        for _ in range(self.n_iterations):
            for i in range(len(y)):
                # Compute the prediction for the i-th sample
                prediction = X[i].dot(self.theta)
                # Compute the error
                error = prediction - y[i]
                # Update the parameter
                self.theta -= self.learning_rate * error * X[i]

    def predict(self, X):
        return X.dot(self.theta)
