import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import linprog

# Define the payoff matrix for a two-player game
# Player 1's payoffs
A = np.array([[3, 0], [5, 1]])

# Player 2's payoffs (negative of Player 1's payoffs for minimization)
B = -A

# Number of strategies for each player
m, n = A.shape

# Player 1's optimization problem
c = np.ones(m)  # Coefficients for the objective function
A_ub = B  # Coefficients for the inequality constraints
b_ub = np.zeros(n)  # Right-hand side of the inequality constraints

# Solve for Player 1's strategy
res1 = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=(0, None), method='highs')

# Player 2's optimization problem
c = np.ones(n)  # Coefficients for the objective function
A_ub = -A.T  # Coefficients for the inequality constraints
b_ub = np.zeros(m)  # Right-hand side of the inequality constraints

# Solve for Player 2's strategy
res2 = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=(0, None), method='highs')

# Display the results
print("Player 1's optimal strategy probabilities:", res1.x / np.sum(res1.x))
print("Player 2's optimal strategy probabilities:", res2.x / np.sum(res2.x))

# Calculate the value of the game
value_of_game = 1 / (res1.fun + res2.fun)
print("Value of the game:", value_of_game)

# Plot the payoff matrix
plt.imshow(A, cmap='hot', interpolation='nearest')
plt.colorbar()
plt.xticks(np.arange(n), ['Strategy 1', 'Strategy 2'])
plt.yticks(np.arange(m), ['Strategy 1', 'Strategy 2'])
plt.title('Payoff Matrix for Player 1')
plt.show()
