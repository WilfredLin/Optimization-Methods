def kkt_conditions(f, g, x0):
    from scipy.optimize import minimize
    import numpy as np

    # Define the objective function
    def objective(x):
        return f(x)

    # Define the constraint
    constraints = {'type': 'eq', 'fun': g}

    # Initial guess
    x0 = np.array(x0)

    # Solve the optimization problem
    res = minimize(objective, x0, constraints=constraints)

    if res.success:
        x_opt = res.x
        print("Optimal solution found:", x_opt)
        print("Optimal value:", res.fun)
        
        # Calculate Lagrange multipliers
        lagrange_multipliers = np.linalg.solve(np.array([[g(x_opt)] for x in x_opt]), np.array([0]))
        print("Lagrange multipliers:", lagrange_multipliers)
    else:
        print("No feasible solution found.")

# Example usage
f = lambda x: x[0]**2 + x[1]**2  # Objective function: f(x, y) = x^2 + y^2
g = lambda x: x[0] + x[1] - 1    # Constraint: g(x, y) = x + y - 1 = 0
x0 = [0.5, 0.5]                   # Initial guess
kkt_conditions(f, g, x0)
