import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt

class FuzzyLogicOptimizer:
    def __init__(self):
        # Define the universe of discourse
        self.x = np.arange(0, 11, 1)  # Input variable (e.g., x)
        self.y = np.arange(0, 11, 1)  # Output variable (e.g., y)

        # Fuzzy membership functions for input
        self.x_low = fuzz.trimf(self.x, [0, 0, 5])
        self.x_medium = fuzz.trimf(self.x, [0, 5, 10])
        self.x_high = fuzz.trimf(self.x, [5, 10, 10])

        # Fuzzy membership functions for output
        self.y_low = fuzz.trimf(self.y, [0, 0, 5])
        self.y_medium = fuzz.trimf(self.y, [0, 5, 10])
        self.y_high = fuzz.trimf(self.y, [5, 10, 10])

        # Rule base
        self.rules = {
            'low': {'input': self.x_low, 'output': self.y_low},
            'medium': {'input': self.x_medium, 'output': self.y_medium},
            'high': {'input': self.x_high, 'output': self.y_high}
        }

    def fuzzify(self, input_value):
        # Fuzzify the input value
        x_low_level = fuzz.interp_membership(self.x, self.x_low, input_value)
        x_medium_level = fuzz.interp_membership(self.x, self.x_medium, input_value)
        x_high_level = fuzz.interp_membership(self.x, self.x_high, input_value)
        return x_low_level, x_medium_level, x_high_level

    def apply_rules(self, x_levels):
        # Apply fuzzy rules
        output_levels = []
        for key, rule in self.rules.items():
            output_level = np.fmax(x_levels[0] * rule['input'], x_levels[1] * rule['input'])
            output_levels.append(output_level)
        return output_levels

    def defuzzify(self, output_levels):
        # Defuzzify the output
        aggregated = np.fmax(output_levels[0], np.fmax(output_levels[1], output_levels[2]))
        return fuzz.defuzz(self.y, aggregated, 'centroid')

    def optimize(self, input_value):
        x_levels = self.fuzzify(input_value)
        output_levels = self.apply_rules(x_levels)
        result = self.defuzzify(output
