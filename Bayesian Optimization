import numpy as np
from scipy.optimize import minimize
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C

# Define the function to minimize
def f(x):
    return x[0]**2 + x[1]**2  # Example function

# Bayesian Optimization Method
class BayesianOptimization:
    def __init__(self, f, bounds, n_initial=5):
        self.f = f
        self.bounds = bounds
        self.n_initial = n_initial
        self.X = np.random.uniform(bounds[:, 0], bounds[:, 1], (n_initial, bounds.shape[0]))
        self.Y = np.array([f(x) for x in self.X])
        self.gpr = GaussianProcessRegressor(kernel=C(1.0) * RBF(length_scale=1.0))

    def optimize(self, n_iterations=10):
        for _ in range(n_iterations):
            self.gpr.fit(self.X, self.Y)
            x_next = self.acquisition_function()
            y_next = self.f(x_next)
            self.X = np.vstack((self.X, x_next))
            self.Y = np.append(self.Y, y_next)

        best_idx = np.argmin(self.Y)
        return self.X[best_idx], self.Y[best_idx]

    def acquisition_function(self):
        x_candidates = np.random.uniform(self.bounds[:, 0], self.bounds[:, 1], (1000, self.bounds.shape[0]))
        mu, sigma = self.gpr.predict(x_candidates, return_std=True)
        return x_candidates[np.argmax(mu + sigma)]

# Usage
bounds = np.array([[-10, 10], [-10, 10]])
optimizer = BayesianOptimization(f, bounds)
best_solution, best_score = optimizer.optimize()
print("Best Solution:", best_solution)
print("Best Score:", best_score)
