import numpy as np

class TrustRegion:
    def __init__(self, delta=1.0, n_iterations=100):
        self.delta = delta
        self.n_iterations = n_iterations

    def fit(self, func, grad, x0):
        x = x0
        for _ in range(self.n_iterations):
            # Compute the gradient and Hessian at the current point
            g = grad(x)
            H = self.approx_hessian(func, x, g)

            # Solve the trust region subproblem
            p = self.solve_subproblem(g, H)

            # Update the point
            x_new = x + p

            # Check if the new point is within the trust region
            if np.linalg.norm(p) <= self.delta:
                x = x_new

        return x

    def solve_subproblem(self, g, H):
        # Solve the quadratic subproblem: min 0.5 * p^T * H * p + g^T * p
        # This is a simple implementation; a more robust solver may be needed
        p = -np.linalg.inv(H).dot(g)
        return p

    def approx_hessian(self, func, x, g):
        # Approximate the Hessian using finite differences
        h = 1e-5
        n = len(x)
        H = np.zeros((n, n))
        for i in range(n):
            x1 = np.copy(x)
            x2 = np.copy(x)
            x1[i] += h
            x2[i] -= h
            H[:, i] = (grad(x1) - grad(x2)) / (2 * h)
        return H

    def predict(self, x):
        # This method could be implemented to return the function value at x
        pass
