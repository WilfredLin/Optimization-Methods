import numpy as np

class CoordinateDescent:
    def __init__(self, learning_rate=0.01, n_iterations=100):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations

    def fit(self, X, y):
        self.theta = np.zeros(X.shape[1])
        for _ in range(self.n_iterations):
            for j in range(X.shape[1]):
                # Compute the partial derivative
                gradient = self._compute_gradient(X, y, j)
                # Update the parameter
                self.theta[j] -= self.learning_rate * gradient

    def _compute_gradient(self, X, y, j):
        predictions = X.dot(self.theta)
        errors = predictions - y
        gradient = (1 / len(y)) * np.dot(X[:, j], errors)
        return gradient

    def predict(self, X):
        return X.dot(self.theta)
