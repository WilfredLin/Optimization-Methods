import numpy as np
import random

# Define a simple heuristic algorithm: Simulated Annealing
def simulated_annealing(initial_solution, objective_function, temperature, cooling_rate, max_iterations):
    current_solution = initial_solution
    current_value = objective_function(current_solution)
    
    best_solution = current_solution
    best_value = current_value

    for iteration in range(max_iterations):
        # Generate a neighbor solution
        neighbor_solution = generate_neighbor(current_solution)
        neighbor_value = objective_function(neighbor_solution)

        # Calculate the change in value
        delta = neighbor_value - current_value

        # If the neighbor solution is better, accept it
        if delta < 0:
            current_solution = neighbor_solution
            current_value = neighbor_value
        else:
            # Accept with a certain probability
            acceptance_probability = np.exp(-delta / temperature)
            if random.random() < acceptance_probability:
                current_solution = neighbor_solution
                current_value = neighbor_value

        # Update the best solution found
        if current_value < best_value:
            best_solution = current_solution
            best_value = current_value

        # Cool down the temperature
        temperature *= cooling_rate

    return best_solution, best_value

# Example objective function: minimize the sum of squares
def objective_function(solution):
    return sum(x**2 for x in solution)

# Function to generate a neighbor solution
def generate_neighbor(solution):
    neighbor = solution.copy()
    index = random.randint(0, len(solution) - 1)
    neighbor[index] += random.choice([-1, 1])  # Slightly modify the solution
    return neighbor

# Example usage
initial_solution = [random.randint(-10, 10) for _ in range(5)]
temperature = 1000
cooling_rate = 0.95
max_iterations = 1000

best_solution, best_value = simulated_annealing(initial_solution, objective_function, temperature, cooling_rate, max_iterations)

print('Best solution:', best_solution)
print('Best value:', best_value)
