def branch_and_bound_knapsack(weights, values, capacity):
    n = len(values)
    max_value = 0

    # Create a list of items with their index
    items = list(range(n))

    # Define a function to calculate the bound
    def bound(i, weight, value):
        if weight >= capacity:
            return 0
        result = value
        j = i + 1
        total_weight = weight

        while j < n and total_weight + weights[j] <= capacity:
            total_weight += weights[j]
            result += values[j]
            j += 1

        if j < n:
            result += (capacity - total_weight) * (values[j] / weights[j])

        return result

    # Define a queue for the nodes
    queue = []
    queue.append((0, 0, 0))  # (index, current weight, current value)

    while queue:
        i, current_weight, current_value = queue.pop(0)

        if i < n:
            # Include the current item
            new_weight = current_weight + weights[i]
            new_value = current_value + values[i]

            if new_weight <= capacity:
                max_value = max(max_value, new_value)
                if bound(i, new_weight, new_value) > max_value:
                    queue.append((i + 1, new_weight, new_value))

            # Exclude the current item
            if bound(i, current_weight, current_value) > max_value:
                queue.append((i + 1, current_weight, current_value))

    return max_value

# Example usage
weights = [1, 2, 3]
values = [10, 20, 30]
capacity = 6
result = branch_and_bound_knapsack(weights, values, capacity)
print("Maximum value in Knapsack =", result)
