import numpy as np
import random

# Define a simple heuristic algorithm: Local Search
def local_search(initial_solution, objective_function, max_iterations):
    current_solution = initial_solution
    current_value = objective_function(current_solution)
    
    best_solution = current_solution
    best_value = current_value

    for iteration in range(max_iterations):
        # Generate a neighbor solution
        neighbor_solution = generate_neighbor(current_solution)
        neighbor_value = objective_function(neighbor_solution)

        # If the neighbor solution is better, accept it
        if neighbor_value < current_value:
            current_solution = neighbor_solution
            current_value = neighbor_value

        # Update the best solution found
        if current_value < best_value:
            best_solution = current_solution
            best_value = current_value

    return best_solution, best_value

# Example objective function: minimize the sum of squares
def objective_function(solution):
    return sum(x**2 for x in solution)

# Function to generate a neighbor solution
def generate_neighbor(solution):
    neighbor = solution.copy()
    index = random.randint(0, len(solution) - 1)
    neighbor[index] += random.choice([-1, 1])  # Slightly modify the solution
    return neighbor

# Example usage
initial_solution = [random.randint(-10, 10) for _ in range(5)]
max_iterations = 1000

best_solution, best_value = local_search(initial_solution, objective_function, max_iterations)

print('Best solution:', best_solution)
print('Best value:', best_value)

# Approximation Algorithm Example: Greedy Set Cover
def greedy_set_cover(universe, subsets):
    cover = set()
    selected_subsets = []
    
    while cover != universe:
        # Select the subset that covers the most uncovered elements
        subset = max(subsets, key=lambda s: len(s - cover))
        cover |= subset
        selected_subsets.append(subset)
        subsets.remove(subset)
    
    return selected_subsets

# Example usage of the greedy set cover algorithm
universe = {1, 2, 3, 4, 5, 6}
subsets = [{1, 2, 3}, {2, 4}, {3, 5}, {4, 6}, {5, 6}]

selected_subsets = greedy_set_cover(universe, subsets)

print('Selected subsets for set cover:', selected_subsets)
